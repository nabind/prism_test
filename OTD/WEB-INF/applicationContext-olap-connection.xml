<?xml version="1.0" encoding="UTF-8"?>

	<!-- 
		N.B. This file overwrites the CE version of the file.
		Pro adds the secure Mondrian connection type, and uses different beans for the olapConnectionService
		and olapManagementService. We are trying to avoid overwriting but this case wouldn't be so easy to get around.
	-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <bean id="olapConnectionService" 
	class="com.jaspersoft.ji.ja.security.service.LicenseCheckingOlapConnectionServiceImpl">
    <property name="repository" ref="${bean.repositoryService}"/>
    <property name="attributeDelimiter" value=","/>
    <property name="encodingProvider">
      <ref bean="encodingProvider"/>
    </property>
    <property name="userService" ref="${bean.userAuthorityService}"/>
    <property name="tenantService" ref="${bean.tenantService}"/>
    <property name="pathTransformer" ref="repositoryPathTransformer"/>
    <property name="useContentChecksum" value="${UseContentChecksum}"/>

      <!-- set to 'false' to turn off OLAP4J Role based Security -->
    <property name="useSecureConnection" value="true"/>

      <!-- in the absence of a JNDI service, use jndiFallbackResolver look up the properties in the file. -->
      <property name="jndiFallbackResolver" ref="jndiFallbackResolver"/>

    <!-- olap4j caching config 
    see javadoc here http://www.olap4j.org/api/org/olap4j/driver/xmla/cache/XmlaOlap4jNamedMemoryCache.html -->        
    <!--property name="OLAP4J_CACHE" value="org.olap4j.driver.xmla.cache.XmlaOlap4jNamedMemoryCache"/-->
    <property name="OLAP4J_CACHE" value="com.jaspersoft.jasperserver.api.metadata.olap.util.JasperServerXMLACache"/>
    <property name="OLAP4J_CACHE_NAME" value="JasperServerXMLACache"/>
    <property name="OLAP4J_CACHE_MODE" value="LFU"/>
    <property name="OLAP4J_CACHE_TIMEOUT" value="3600"/>
    <property name="OLAP4J_CACHE_SIZE" value="10000"/>
  </bean>

	<!-- this alias is here to make OlapConnectionService happy, because it needs to get to the unproxied OlapConnectionServiceImpl,
		 and for some unknown reason, CE has a transaction proxy in front of it but Pro doesn't.
	-->
    <alias name="olapConnectionService" alias="olapConnectionServiceTarget"/>
	
    <bean class="com.jaspersoft.jasperserver.api.common.util.spring.GenericBeanUpdater">
        <property name="definition" ref="mapClientClass"/>
        <property name="value">
            <map>
                <entry key="com.jaspersoft.jasperserver.api.metadata.olap.domain.MondrianConnection"
                       value="com.jaspersoft.ji.ja.security.domain.SecureMondrianConnectionImpl"/>
                <entry key="com.jaspersoft.ji.ja.security.domain.SecureMondrianConnection"
                       value="com.jaspersoft.ji.ja.security.domain.SecureMondrianConnectionImpl"/>
            </map>
        </property>
        <property name="valueType" value="stringMap"/>
    </bean>

    <bean class="com.jaspersoft.jasperserver.api.common.util.spring.GenericBeanUpdater">
        <property name="definition" ref="mapRepoClass"/>
        <property name="value">
            <map>
                <entry key="com.jaspersoft.jasperserver.api.metadata.olap.domain.MondrianConnection"
                       value="com.jaspersoft.ji.ja.security.domain.RepoSecureMondrianConnection"/>
                <entry key="com.jaspersoft.ji.ja.security.domain.SecureMondrianConnection"
                       value="com.jaspersoft.ji.ja.security.domain.RepoSecureMondrianConnection"/>
                <entry key="com.jaspersoft.jasperserver.api.metadata.olap.domain.MondrianXMLADefinition"
                       value="com.jaspersoft.ji.ja.security.domain.RepoSecureMondrianXMLADefinition"/>
            </map>
        </property>
        <property name="valueType" value="stringMap"/>
    </bean>

  <bean id="olapManagementService"
    class="com.jaspersoft.ji.ja.security.service.SecureOlapManagementServiceImpl">
        <!-- looking up internal resources -->
        <property name="repositoryService">
            <ref bean="${bean.internalRepositoryService}"/>
        </property>
        <property name="olapConnectionService">
            <ref bean="olapConnectionService"/>
        </property>
        <property name="mondrianConnectionCache" ref="sharedMondrianConnectionCacheFactory"/>
        <property name="pathTransformer" ref="repositoryPathTransformer"/>

        <!--
        <property name="resourceFactory" ref="mappingResourceFactory"/>
        <property name="persistentClassMappings" ref="persistentMappings"/>
        <property name="externalRepositoryService" ref="${bean.repositoryService}"/>
        -->
  </bean>
	

     <!-- Setup a cache for Mondrian connections to synch cache flushing  -->
    <bean id="olapCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" lazy-init="true" depends-on="sysProperties">
      <property name="configLocation">
         <value>${resource.root}/olap-ehcache.xml</value>
      </property>
    </bean>
    
    <bean id="sharedMondrianConnectionCacheFactory" class="org.springframework.cache.ehcache.EhCacheFactoryBean" lazy-init="true">
      <property name="cacheManager">
         <ref bean="${bean.olapCacheManager}"/>

         <!-- <ref bean="olapCacheManager"/> -->
      </property>
      <property name="cacheName">
        <value>sharedMondrianConnections</value>
      </property>
    </bean>

  <bean id="xmlaUpdateListener" class="com.jaspersoft.jasperserver.war.xmla.XMLAUpdateListener"/>

  <bean id="jpivotRepositoryFilter" class="com.jaspersoft.jasperserver.war.repository.impl.RepositoryDataFilterImpl">
      <property name="uriList">
          <list>
              <value><![CDATA[(/organizations/[^/]+)*/temp(/.*)?]]></value>
              <value><![CDATA[^(/organizations/[^/]+)*/organizations/org_template(/.*)?]]></value>
          </list>
      </property>
      <property name="userService"><ref bean="${bean.internalUserAuthorityService}"/></property>
      <property name="roleToShowFolders" value="ROLE_ADMINISTRATOR"/>
  </bean>

</beans>
