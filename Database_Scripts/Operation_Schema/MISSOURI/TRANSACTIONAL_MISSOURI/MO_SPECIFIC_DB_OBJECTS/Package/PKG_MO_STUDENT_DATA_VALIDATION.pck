CREATE OR REPLACE PACKAGE PKG_MO_STUDENT_DATA_VALIDATION IS

  PROCEDURE PRC_MO_STUDENT_DATA_VALIDATION;

  PROCEDURE PRC_MO_VALID_VALUES_CHECK(IN_VALUE           IN VARCHAR2,
                                      OUT_FIELD_NAME     OUT VARCHAR2,
                                      OUT_FIELD_IS_VALID OUT VARCHAR2,
                                      OUT_FIELD_ERR_CODE OUT VARCHAR2);

  PROCEDURE PRC_ACCOMMODATIONS_CODE(IN_VALUE IN VARCHAR2,
                                    OUT_VAL  OUT VARCHAR2);

END PKG_MO_STUDENT_DATA_VALIDATION;
/
CREATE OR REPLACE PACKAGE BODY PKG_MO_STUDENT_DATA_VALIDATION IS

  GV_SCH_DIST_CODE VARCHAR2(100):=NULL;
  GV_CONTENT_CODE  VARCHAR2(100):=NULL;
  GV_ADMIN_YEAR    VARCHAR2(10) :=NULL;

  PROCEDURE PRC_MO_STUDENT_DATA_VALIDATION IS
  
    V_FLAG     VARCHAR2(1);
    V_FLD_NAME VARCHAR2(200);
    V_ERR_CODE VARCHAR2(200);
    V_STU_EXISTS NUMBER := 0;
    V_STU_DIS NUMBER := 0;
  
    CURSOR C_STUDENT_DATA IS
      SELECT 'STATE_CODE-HIER~' || STATE_CODE STATE_CODE,
             'TP_CODE-HIER~' || TP_CODE TP_CODE,
             'DISTRICT_CODE-HIER~' || DISTRICT_CODE DISTRICT_CODE,
             'SCHOOL_CODE-HIER~' || SCHOOL_CODE SCHOOL_CODE,
             'SCHOOL_DIST-HIER~' || SCHOOL_CODE||' '||DISTRICT_CODE SCHOOL_DIST,
              SCHOOL_CODE AS SCH_CODE,
             'GRADE-HIER~' || GRADE GRADE,
             --  'CITY-HIER~' || CITY CITY,
             'CURRENT_SCHOOL_YEAR-DEMO~' || CURRENT_SCHOOL_YEAR CURRENT_SCHOOL_YEAR,
             DRC_STUDENT_ID AS STUDENT_ID,
             'DRC_STUDENT_ID-BIO~' || DRC_STUDENT_ID DRC_STUDENT_ID,
             --  'LOCAL_STUDENT_ID-BIO~' || LOCAL_STUDENT_ID LOCAL_STUDENT_ID,
             --  'STATE_ID-BIO~' || STATE_ID STATE_ID,
             --'LAST_NAME-BIO~' || LAST_NAME LAST_NAME,
             --'FIRST_NAME-BIO~' || FIRST_NAME FIRST_NAME,
             --  'MIDDLE_NAME-BIO~' || MIDDLE_NAME MIDDLE_NAME,--
             --  'SUFFIX-BIO~' || SUFFIX SUFFIX,--
             --'BIRTH_DATE-BIO~' || BIRTH_DATE BIRTH_DATE,
             --'GENDER-BIO~' || GENDER GENDER,
           --  'RACE_ETHNICITY-DEMO~' || RACE_ETHNICITY RACE_ETHNICITY,
             'HOME_SCHOOL-DEMO~' || HOME_SCHOOL HOME_SCHOOL,
            /* 'PRIVATE_SCHOOL-DEMO~' || PRIVATE_SCHOOL PRIVATE_SCHOOL,
             'STATE_USE_1-DEMO~' || STATE_USE_1 STATE_USE_1,
             'STATE_USE_2-DEMO~' || STATE_USE_2 STATE_USE_2,
             'STATE_USE_3-DEMO~' || STATE_USE_3 STATE_USE_3,
             'STATE_USE_4-DEMO~' || STATE_USE_4 STATE_USE_4,
             'STATE_USE_5-DEMO~' || STATE_USE_5 STATE_USE_5,
             'STATE_USE_6-DEMO~' || STATE_USE_6 STATE_USE_6,
             'STATE_USE_7-DEMO~' || STATE_USE_7 STATE_USE_7,
             'STATE_USE_8-DEMO~' || STATE_USE_8 STATE_USE_8,
             'STATE_USE_9-DEMO~' || STATE_USE_9 STATE_USE_9,
             'STATE_USE_10-DEMO~' || STATE_USE_10 STATE_USE_10,
             'PERIOD-DEMO~' || PERIOD PERIOD, */
             CONTENT_CODE AS CON_CODE,
             'CONTENT_CODE-SUBTEST~' || CONTENT_CODE CONTENT_CODE,
             'CONTENT_FORM-DEMO~' || CONTENT_FORM CONTENT_FORM,
             'PT_CONTENT_FORM-DEMO~' || PT_CONTENT_FORM PT_CONTENT_FORM,
             'EDUCATOR_FIRST_NAME-SUBTEST~' || EDUCATOR_FIRST_NAME EDUCATOR_FIRST_NAME,
             'EDUCATOR_LAST_NAME-SUBTEST~' || EDUCATOR_LAST_NAME EDUCATOR_LAST_NAME,
          --   'EXAMINER_EMAIL-DEMO~' || EXAMINER_EMAIL EXAMINER_EMAIL,
             'CONTENT_EXPORT_DATE_TIME-SUBTEST~' || CONTENT_EXPORT_DATE_TIME CONTENT_EXPORT_DATE_TIME,
             -- 'TEST_DATE-SUBTEST~' || TEST_DATE TEST_DATE,--
             'PRECODE_FLAG-DEMO~' || PRECODE_FLAG PRECODE_FLAG,
          --  'ACCOMMODATIONS-DEMO~' || ACCOMMODATIONS ACCOMMODATIONS,
             ACCOMMODATIONS AS ACCOM,
             'TEACHER_INVALIDATION-DEMO~' || TEACHER_INVALIDATION TEACHER_INVALIDATION,
             'ABSENT-DEMO~' || ABSENT ABSENT,
             /* 'CONTENT_AREA_TITLE-SUBTEST~' || CONTENT_AREA_TITLE CONTENT_AREA_TITLE,--
                          'ITEM_RESPONSE_MC-ITEM~' || ITEM_RESPONSE_MC ITEM_RESPONSE_MC,--
                          'ITEM_SCORE_MC-ITEM~' || ITEM_SCORE_MC ITEM_SCORE_MC,--
                          'RAW_SCORE_MC-ITEM~' || RAW_SCORE_MC RAW_SCORE_MC,--
                          'ITEM_SCORE_CR-ITEM~' || ITEM_SCORE_CR ITEM_SCORE_CR,--
                          'RAW_SCORE_CR-ITEM~' || RAW_SCORE_CR RAW_SCORE_CR,--
                          'ITEM_SCORE_TE-ITEM~' || ITEM_SCORE_TE ITEM_SCORE_TE,--
                          'RAW_SCORE_TE-ITEM~' || RAW_SCORE_TE RAW_SCORE_TE,--
                          'TOTAL_RAW_SCORE-ITEM~' || TOTAL_RAW_SCORE TOTAL_RAW_SCORE,--
                          'COMPLETION_CRITERIA-SUBTEST~' || COMPLETION_CRITERIA COMPLETION_CRITERIA,--
                          'PERCENT_CORRECT-SUBTEST~' || PERCENT_CORRECT PERCENT_CORRECT,--
                          'SCALE_SCORE-SUBTEST~' || SCALE_SCORE SCALE_SCORE,--*/
             'CONTENT_ACHIEV_LEVEL-SUBTEST~' || CONTENT_ACHIEV_LEVEL CONTENT_ACHIEV_LEVEL,
             'OBJECTIVE_1_CODE-OBJ~' || OBJECTIVE_1_CODE OBJECTIVE_1_CODE,
                         /* 'OBJECTIVE_1_NUMBER_CORRECT-OBJ~' || OBJECTIVE_1_NUMBER_CORRECT OBJECTIVE_1_NUMBER_CORRECT,--
                          'OBJECTIVE_1_PERCENT_CORRECT-OBJ~' || OBJECTIVE_1_PERCENT_CORRECT OBJECTIVE_1_PERCENT_CORRECT,--*/
             'OBJECTIVE_1_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_1_ACHEIVEMENT_LEVEL OBJECTIVE_1_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_2_CODE-OBJ~' || OBJECTIVE_2_CODE OBJECTIVE_2_CODE,
                         /* 'OBJECTIVE_2_NUMBER_CORRECT-OBJ~' || OBJECTIVE_2_NUMBER_CORRECT OBJECTIVE_2_NUMBER_CORRECT,
                          'OBJECTIVE_2_PERCENT_CORRECT-OBJ~' || OBJECTIVE_2_PERCENT_CORRECT OBJECTIVE_2_PERCENT_CORRECT,*/
             'OBJECTIVE_2_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_2_ACHEIVEMENT_LEVEL OBJECTIVE_2_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_3_CODE-OBJ~' || OBJECTIVE_3_CODE OBJECTIVE_3_CODE,
                         /* 'OBJECTIVE_3_NUMBER_CORRECT-OBJ~' || OBJECTIVE_3_NUMBER_CORRECT OBJECTIVE_3_NUMBER_CORRECT,
                          'OBJECTIVE_3_PERCENT_CORRECT-OBJ~' || OBJECTIVE_3_PERCENT_CORRECT OBJECTIVE_3_PERCENT_CORRECT,*/
             'OBJECTIVE_3_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_3_ACHEIVEMENT_LEVEL OBJECTIVE_3_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_4_CODE-OBJ~' || OBJECTIVE_4_CODE OBJECTIVE_4_CODE,
                         /* 'OBJECTIVE_4_NUMBER_CORRECT-OBJ~' || OBJECTIVE_4_NUMBER_CORRECT OBJECTIVE_4_NUMBER_CORRECT,
                          'OBJECTIVE_4_PERCENT_CORRECT-OBJ~' || OBJECTIVE_4_PERCENT_CORRECT OBJECTIVE_4_PERCENT_CORRECT,*/
             'OBJECTIVE_4_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_4_ACHEIVEMENT_LEVEL OBJECTIVE_4_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_5_CODE-OBJ~' || OBJECTIVE_5_CODE OBJECTIVE_5_CODE,
                          /*'OBJECTIVE_5_NUMBER_CORRECT-OBJ~' || OBJECTIVE_5_NUMBER_CORRECT OBJECTIVE_5_NUMBER_CORRECT,
                          'OBJECTIVE_5_PERCENT_CORRECT-OBJ~' || OBJECTIVE_5_PERCENT_CORRECT OBJECTIVE_5_PERCENT_CORRECT,*/
             'OBJECTIVE_5_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_5_ACHEIVEMENT_LEVEL OBJECTIVE_5_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_6_CODE-OBJ~' || OBJECTIVE_6_CODE OBJECTIVE_6_CODE,
                          /*'OBJECTIVE_6_NUMBER_CORRECT-OBJ~' || OBJECTIVE_6_NUMBER_CORRECT OBJECTIVE_6_NUMBER_CORRECT,
                          'OBJECTIVE_6_PERCENT_CORRECT-OBJ~' || OBJECTIVE_6_PERCENT_CORRECT OBJECTIVE_6_PERCENT_CORRECT,*/
             'OBJECTIVE_6_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_6_ACHEIVEMENT_LEVEL OBJECTIVE_6_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_7_CODE-OBJ~' || OBJECTIVE_7_CODE OBJECTIVE_7_CODE,
                         /* 'OBJECTIVE_7_NUMBER_CORRECT-OBJ~' || OBJECTIVE_7_NUMBER_CORRECT OBJECTIVE_7_NUMBER_CORRECT,
                          'OBJECTIVE_7_PERCENT_CORRECT-OBJ~' || OBJECTIVE_7_PERCENT_CORRECT OBJECTIVE_7_PERCENT_CORRECT,*/
             'OBJECTIVE_7_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_7_ACHEIVEMENT_LEVEL OBJECTIVE_7_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_8_CODE-OBJ~' || OBJECTIVE_8_CODE OBJECTIVE_8_CODE,
                         /* 'OBJECTIVE_8_NUMBER_CORRECT-OBJ~' || OBJECTIVE_8_NUMBER_CORRECT OBJECTIVE_8_NUMBER_CORRECT,
                          'OBJECTIVE_8_PERCENT_CORRECT-OBJ~' || OBJECTIVE_8_PERCENT_CORRECT OBJECTIVE_8_PERCENT_CORRECT,*/
             'OBJECTIVE_8_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_8_ACHEIVEMENT_LEVEL OBJECTIVE_8_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_9_CODE-OBJ~' || OBJECTIVE_9_CODE OBJECTIVE_9_CODE,
                         /* 'OBJECTIVE_9_NUMBER_CORRECT-OBJ~' || OBJECTIVE_9_NUMBER_CORRECT OBJECTIVE_9_NUMBER_CORRECT,
                          'OBJECTIVE_9_PERCENT_CORRECT-OBJ~' || OBJECTIVE_9_PERCENT_CORRECT OBJECTIVE_9_PERCENT_CORRECT,*/
             'OBJECTIVE_9_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_9_ACHEIVEMENT_LEVEL OBJECTIVE_9_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_10_CODE-OBJ~' || OBJECTIVE_10_CODE OBJECTIVE_10_CODE,
                          /*'OBJECTIVE_10_NUMBER_CORRECT-OBJ~' || OBJECTIVE_10_NUMBER_CORRECT OBJECTIVE_10_NUMBER_CORRECT,
                          'OBJECTIVE_10_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_10_PERCENT_CORRECT OBJECTIVE_10_PERCENT_CORRECT,*/
             'OBJECTIVE_10_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_10_ACHEIVEMENT_LEVEL OBJECTIVE_10_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_11_CODE-OBJ~' || OBJECTIVE_11_CODE OBJECTIVE_11_CODE,
                         /* 'OBJECTIVE_11_NUMBER_CORRECT-OBJ~' || OBJECTIVE_11_NUMBER_CORRECT OBJECTIVE_11_NUMBER_CORRECT,
                          'OBJECTIVE_11_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_11_PERCENT_CORRECT OBJECTIVE_11_PERCENT_CORRECT,*/
             'OBJECTIVE_11_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_11_ACHEIVEMENT_LEVEL OBJECTIVE_11_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_12_CODE-OBJ~' || OBJECTIVE_12_CODE OBJECTIVE_12_CODE,
                         /* 'OBJECTIVE_12_NUMBER_CORRECT-OBJ~' || OBJECTIVE_12_NUMBER_CORRECT OBJECTIVE_12_NUMBER_CORRECT,
                          'OBJECTIVE_12_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_12_PERCENT_CORRECT OBJECTIVE_12_PERCENT_CORRECT,*/
             'OBJECTIVE_12_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_12_ACHEIVEMENT_LEVEL OBJECTIVE_12_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_13_CODE-OBJ~' || OBJECTIVE_13_CODE OBJECTIVE_13_CODE,
                          /*'OBJECTIVE_13_NUMBER_CORRECT-OBJ~' || OBJECTIVE_13_NUMBER_CORRECT OBJECTIVE_13_NUMBER_CORRECT,
                          'OBJECTIVE_13_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_13_PERCENT_CORRECT OBJECTIVE_13_PERCENT_CORRECT,*/
             'OBJECTIVE_13_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_13_ACHEIVEMENT_LEVEL OBJECTIVE_13_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_14_CODE-OBJ~' || OBJECTIVE_14_CODE OBJECTIVE_14_CODE,
                          /*'OBJECTIVE_14_NUMBER_CORRECT-OBJ~' || OBJECTIVE_14_NUMBER_CORRECT OBJECTIVE_14_NUMBER_CORRECT,
                          'OBJECTIVE_14_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_14_PERCENT_CORRECT OBJECTIVE_14_PERCENT_CORRECT,*/
             'OBJECTIVE_14_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_14_ACHEIVEMENT_LEVEL OBJECTIVE_14_ACHEIVEMENT_LEVEL,
             'OBJECTIVE_15_CODE-OBJ~' || OBJECTIVE_15_CODE OBJECTIVE_15_CODE,
                          /*'OBJECTIVE_15_NUMBER_CORRECT-OBJ~' || OBJECTIVE_15_NUMBER_CORRECT OBJECTIVE_15_NUMBER_CORRECT,
                          'OBJECTIVE_15_PERCENT_CORRECT-OBJ~' ||
                          OBJECTIVE_15_PERCENT_CORRECT OBJECTIVE_15_PERCENT_CORRECT,*/
             'OBJECTIVE_15_ACHEIVEMENT_LEVEL-OBJ~' || OBJECTIVE_15_ACHEIVEMENT_LEVEL OBJECTIVE_15_ACHEIVEMENT_LEVEL,
             'APPEAL_INDICATOR-DEMO~' || APPEAL_INDICATOR APPEAL_INDICATOR
        FROM STUDENT_DATA_EXTRACT
       WHERE IS_FILE_VALID <> 'IN';
  
    TYPE TYP_STUDENT IS TABLE OF varchar2(4000);
    TAB_STU_REC TYP_STUDENT := TYP_STUDENT();
    V_DRC_ID NUMBER :=0;
  
  BEGIN
  
   SELECT ADMIN_YEAR INTO GV_ADMIN_YEAR FROM ADMIN_DIM WHERE IS_CURRENT_ADMIN = 'Y';
  
    FOR FILE_NAME IN (SELECT DISTINCT FILENAME
                        FROM STUDENT_DATA_EXTRACT
                      ) LOOP
    
        SELECT COUNT(1) INTO V_DRC_ID 
          FROM STUDENT_DATA_EXTRACT
         WHERE FILENAME = FILE_NAME.FILENAME
           AND (DRC_STUDENT_ID IS NULL OR CONTENT_CODE IS NULL);
         
        IF V_DRC_ID <> 0 THEN 
         
       UPDATE STUDENT_DATA_EXTRACT
          SET IS_FILE_VALID = 'IN',
              LOG           = 'EITHER DRC_STUDENT_ID OR CONTENT_CODE IS BLANK IN FILE'
        WHERE FILENAME = FILE_NAME.FILENAME;
       
         UPDATE STG_TASK_STATUS STS 
            SET STS.HIER_VALIDATION   = 'ER',
             STS.BIO_VALIDATION       = 'ER',
             STS.DEMO_VALIDATION      = 'ER',
             STS.CONTENT_VALIDATION   = 'ER',
             STS.OBJECTIVE_VALIDATION = 'ER',
             STS.ITEM_VALIDATION      = 'ER',
             STS.TASK_LOG             = 'EITHER DRC_STUDENT_ID OR CONTENT_CODE IS BLANK IN FILE'
          WHERE STS.TASK_ID = (SELECT DISTINCT TASK_ID 
                                 FROM STUDENT_DATA_EXTRACT SD 
                                WHERE SD.FILENAME = FILE_NAME.FILENAME);
           COMMIT;
       
         END IF;
      END LOOP;
                 
       
    FOR C_STU_REC IN C_STUDENT_DATA LOOP

      TAB_STU_REC.DELETE;
    
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_CODE;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.TP_CODE;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.DISTRICT_CODE;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.SCHOOL_CODE;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.SCHOOL_DIST;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.GRADE;
      TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.CITY;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.CURRENT_SCHOOL_YEAR;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.DRC_STUDENT_ID;
      TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.LOCAL_STUDENT_ID;  TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.STATE_ID;  TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.LAST_NAME; TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.FIRST_NAME; TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.MIDDLE_NAME;  TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.SUFFIX;  TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.BIRTH_DATE; TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.GENDER; TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.RACE_ETHNICITY; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.HOME_SCHOOL;
      TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.PRIVATE_SCHOOL; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_1; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_2; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_3; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_4; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_5; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_6; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_7; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_8; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_9; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.STATE_USE_10; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.PERIOD; TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.CONTENT_CODE;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.CONTENT_FORM;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.PT_CONTENT_FORM;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.EDUCATOR_FIRST_NAME;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.EDUCATOR_LAST_NAME;
      TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.EXAMINER_EMAIL; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.CONTENT_EXPORT_DATE_TIME;
      TAB_STU_REC.EXTEND;
      --TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.TEST_DATE;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.PRECODE_FLAG;
      TAB_STU_REC.EXTEND;
   --   TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.ACCOMMODATIONS; TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.TEACHER_INVALIDATION;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.ABSENT;
      TAB_STU_REC.EXTEND;
      /* TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.CONTENT_AREA_TITLE;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.ITEM_RESPONSE_MC;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.ITEM_SCORE_MC;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.RAW_SCORE_MC;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.ITEM_SCORE_CR;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.RAW_SCORE_CR;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.ITEM_SCORE_TE;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.RAW_SCORE_TE;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.TOTAL_RAW_SCORE;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.COMPLETION_CRITERIA;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.PERCENT_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.SCALE_SCORE;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.CONTENT_ACHIEV_LEVEL;
      TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_1_CODE;  
      TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_1_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_1_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_1_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_2_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_2_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_2_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_2_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_3_CODE;  TAB_STU_REC.EXTEND;
     /* TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_3_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_3_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_3_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_4_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_4_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_4_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_4_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_5_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_5_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_5_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_5_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_6_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_6_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_6_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_6_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_7_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_7_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_7_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_7_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_8_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_8_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_8_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_8_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_9_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_9_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_9_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_9_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_10_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_10_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_10_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_10_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_11_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_11_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_11_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_11_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_12_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_12_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_12_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_12_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_13_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_13_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_13_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_13_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_14_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_14_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_14_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_14_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_15_CODE;  TAB_STU_REC.EXTEND;
      /*TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_15_NUMBER_CORRECT;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_15_PERCENT_CORRECT;  TAB_STU_REC.EXTEND;*/
      TAB_STU_REC(TAB_STU_REC.LAST):= C_STU_REC.OBJECTIVE_15_ACHEIVEMENT_LEVEL;  TAB_STU_REC.EXTEND;
      TAB_STU_REC(TAB_STU_REC.LAST) := C_STU_REC.APPEAL_INDICATOR;
      
      GV_SCH_DIST_CODE := NULL;
      GV_CONTENT_CODE := C_STU_REC.CON_CODE;
      
      BEGIN
      
        SELECT LTRIM(SCH_DIST_CODE) SCH_DIST_CODE
          INTO GV_SCH_DIST_CODE
          FROM (SELECT ORG.ORG_NODEID,
                       ORG.ORG_NODE_CODE,
                       SYS_CONNECT_BY_PATH(ORG.ORG_NODE_CODE, ' ') SCH_DIST_CODE,
                       LEVEL AS LEV
                  FROM ORG_NODE_DIM ORG
                 WHERE ORG.CUSTOMERID = (SELECT TP.CUSTOMERID
                                       FROM TEST_PROGRAM TP
                                      WHERE TP.TP_CODE = (SELECT SDE.TP_CODE 
                                                            FROM STUDENT_DATA_EXTRACT SDE
                                                           WHERE ROWNUM = 1)
                                      
                                      
                                      )
                   AND ORG.ORG_NODE_CODE <> 'MO'
                CONNECT BY PRIOR ORG.PARENT_ORG_NODEID = ORG.ORG_NODEID
                 START WITH ORG.ORG_NODE_CODE = C_STU_REC.SCH_CODE)
         WHERE LENGTH(SCH_DIST_CODE) > LENGTH(ORG_NODE_CODE) + 1;
         
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
         GV_SCH_DIST_CODE := 'XXXXXX';
         
       END;
       
BEGIN

  SELECT COUNT(1)
    INTO V_STU_EXISTS
    FROM STUDENT_DATA_EXTRACT SDE
   WHERE SDE.DRC_STUDENT_ID = C_STU_REC.STUDENT_ID
     AND SDE.CONTENT_CODE = C_STU_REC.CON_CODE
     AND EXISTS
   (SELECT 1
            FROM STUDENT_BIO_DIM BIO
           WHERE BIO.TEST_ELEMENT_ID = SDE.DRC_STUDENT_ID);

  IF V_STU_EXISTS > 0 THEN
  
    SELECT COUNT(1)
      INTO V_STU_DIS
      FROM ORG_NODE_DIM         SCH,
           ORG_NODE_DIM         DIS,
           STUDENT_BIO_DIM      ST,
           STUDENT_DATA_EXTRACT SD,
           TEST_PROGRAM         TST
    
     WHERE ST.TEST_ELEMENT_ID = SD.DRC_STUDENT_ID
       AND ST.ORG_NODEID = SCH.ORG_NODEID
       AND DIS.ORG_NODEID = SCH.PARENT_ORG_NODEID
       AND DIS.ORG_NODE_CODE = SD.DISTRICT_CODE
       AND SD.DRC_STUDENT_ID = C_STU_REC.STUDENT_ID
       AND SD.CONTENT_CODE = C_STU_REC.CON_CODE
       AND TST.TP_CODE = SD.TP_CODE
       AND TST.CUSTOMERID = ST.CUSTOMERID
       AND ST.CUSTOMERID = SCH.CUSTOMERID
       AND SCH.CUSTOMERID = DIS.CUSTOMERID;
  
    IF V_STU_DIS = 0 THEN
    
      UPDATE STUDENT_DATA_EXTRACT
         SET VALIDATION_FLAG = 'N',
             ERR_CODE        = 'HIER',
             LOG             = '[' ||
                               TO_CHAR(SYSDATE, 'MM/DD/YYYY HH24:MI:SS PM') ||
                               '] DITRICT CHANGED FOR THIS STUDENT'
       WHERE DRC_STUDENT_ID = C_STU_REC.STUDENT_ID
         AND CONTENT_CODE = C_STU_REC.CON_CODE;
    END IF;
  END IF;
END;
       
       
       UPDATE STUDENT_DATA_EXTRACT
             SET ACCOMMODATIONS     = REGEXP_REPLACE(C_STU_REC.ACCOM,'([^Y| ])',' ',1)
           WHERE DRC_STUDENT_ID = C_STU_REC.STUDENT_ID
             AND CONTENT_CODE = C_STU_REC.CON_CODE;
          COMMIT;
          
      
      
    
      FOR I IN TAB_STU_REC.FIRST .. TAB_STU_REC.LAST LOOP
      
        PRC_MO_VALID_VALUES_CHECK(IN_VALUE           => TAB_STU_REC(I),
                                  OUT_FIELD_NAME     => V_FLD_NAME,
                                  OUT_FIELD_IS_VALID => V_FLAG,
                                  OUT_FIELD_ERR_CODE => V_ERR_CODE);
      
        IF V_FLAG = 'Y' THEN
        
          UPDATE STUDENT_DATA_EXTRACT
             SET VALIDATION_FLAG = 'N',
                 ERR_CODE        = V_ERR_CODE,
                 LOG             = '[' ||
                                   TO_CHAR(SYSDATE,
                                           'MM/DD/YYYY HH24:MI:SS PM') ||
                                   '] VALIDATION FAILED FOR: ' ||
                                   REGEXP_SUBSTR(REGEXP_SUBSTR(V_FLD_NAME,
                                                               '[^~]+',
                                                               1,
                                                               1),
                                                 '[^-]+',
                                                 1,
                                                 1)
           WHERE DRC_STUDENT_ID = C_STU_REC.STUDENT_ID
             AND CONTENT_CODE = C_STU_REC.CON_CODE;
          COMMIT;
          EXIT;
        END IF;
      
      END LOOP;
    
    END LOOP;
  
    FOR FILE_NAME IN (SELECT DISTINCT FILENAME
                        FROM STUDENT_DATA_EXTRACT
                       WHERE VALIDATION_FLAG = 'N') LOOP
    
      UPDATE STUDENT_DATA_EXTRACT
         SET IS_FILE_VALID = 'IN'
       WHERE FILENAME = FILE_NAME.FILENAME;
      COMMIT;
    END LOOP;
  
    MERGE INTO STG_TASK_STATUS STS
    USING (SELECT TASK_ID,
       LISTAGG(STU_DATA_LOG,CHR(10)) WITHIN GROUP (ORDER BY TASK_ID ) AS STU_DATA_LOG
FROM (SELECT TASK_ID,
                  '[' || TO_CHAR(SYSDATE, 'MM/DD/YYYY HH24:MI:SS PM') ||
                  ']: ' || 'DRC_STUDENT_ID: ' || DRC_STUDENT_ID || ',' ||
                  'CONTENT_CODE: ' || CONTENT_CODE || ',' || 'ERR_CODE: ' ||
                  ERR_CODE AS STU_DATA_LOG
             FROM STUDENT_DATA_EXTRACT
            WHERE VALIDATION_FLAG = 'N')
GROUP BY TASK_ID   ) SDE
    ON (STS.TASK_ID = SDE.TASK_ID)
    WHEN MATCHED THEN
      UPDATE
         SET STS.HIER_VALIDATION      = 'ER',
             STS.BIO_VALIDATION       = 'ER',
             STS.DEMO_VALIDATION      = 'ER',
             STS.CONTENT_VALIDATION   = 'ER',
             STS.OBJECTIVE_VALIDATION = 'ER',
             STS.ITEM_VALIDATION      = 'ER',
             STS.TASK_LOG             = STS.TASK_LOG || STU_DATA_LOG ||
                                        CHR(10);
  
    MERGE INTO STG_PROCESS_STATUS SPS
    USING (SELECT P.PROCESS_ID,
                  '[' || TO_CHAR(SYSDATE, 'MM/DD/YYYY HH24:MI:SS PM') || ']' ||
                  CHR(10) || 'ERROR IN FOLLOWING TASKS: ' ||
                  LISTAGG(TSK.TASK_ID, ',') WITHIN
            GROUP(
            ORDER BY P.process_id) AS TASK_ID
             FROM STG_PROCESS_STATUS P, STG_TASK_STATUS TSK
            WHERE P.PROCESS_ID =
                  (SELECT DISTINCT PROCESS_ID FROM STUDENT_DATA_EXTRACT)
              AND P.PROCESS_ID = TSK.PROCESS_ID
              AND NOT EXISTS (SELECT NULL
                     FROM STG_TASK_STATUS T1
                    WHERE T1.PROCESS_ID = P.PROCESS_ID
                      AND T1.HIER_VALIDATION != 'ER')
            group by P.process_id) PT
    ON (SPS.PROCESS_ID = PT.PROCESS_ID)
    WHEN MATCHED THEN
      UPDATE
         SET SPS.HIER_VALIDATION      = 'ER',
             SPS.BIO_VALIDATION       = 'ER',
             SPS.DEMO_VALIDATION      = 'ER',
             SPS.CONTENT_VALIDATION   = 'ER',
             SPS.OBJECTIVE_VALIDATION = 'ER',
             SPS.ITEM_VALIDATION      = 'ER',
             SPS.PROCESS_LOG          = PT.TASK_ID;
  
    COMMIT;
 /* EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;*/
    
  END PRC_MO_STUDENT_DATA_VALIDATION;

  PROCEDURE PRC_MO_VALID_VALUES_CHECK(IN_VALUE           IN VARCHAR2,
                                      OUT_FIELD_NAME     OUT VARCHAR2,
                                      OUT_FIELD_IS_VALID OUT VARCHAR2,
                                      OUT_FIELD_ERR_CODE OUT VARCHAR2) IS
  
    V_FIELD_NAME                VARCHAR2(100);
    V_FIELD_VAL                 VARCHAR2(100);
    V_ERR_CODE                  VARCHAR2(100);
    V_FLAG                      VARCHAR2(1);
    V_PRODUCT_CODE              VARCHAR2(100);
    V_CONTENT_EXPORT_DATE_TIME  DATE;
  
  BEGIN
  
    V_FIELD_NAME := REGEXP_SUBSTR(IN_VALUE, '[^~]+', 1, 1);
    V_FIELD_VAL  := REGEXP_SUBSTR(IN_VALUE, '[^~]+', 1, 2);
    V_ERR_CODE   := REPLACE(REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 2), '~');
  
    IF V_FIELD_NAME  LIKE '%HIER' THEN
    
      IF V_FIELD_NAME = 'STATE_CODE-HIER' THEN
        IF V_FIELD_VAL IS NULL OR V_FIELD_VAL <> 'MO' THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;
        
       ELSIF V_FIELD_NAME = 'TP_CODE-HIER' THEN 
        
          SELECT PRODUCT_CODE
            INTO V_PRODUCT_CODE
            FROM PRODUCT
           WHERE PRODUCTID =
                 (SELECT PRODUCTID
                    FROM CUST_PRODUCT_LINK
                   WHERE CUSTOMERID = (SELECT CUSTOMERID
                                         FROM CUSTOMER_INFO
                                        WHERE CUSTOMER_CODE = 'MO')
                     AND ADMINID =
                         (SELECT ADMINID FROM ADMIN_DIM WHERE IS_CURRENT_ADMIN = 'Y'));
          
            IF V_FIELD_VAL IS NULL OR V_FIELD_VAL <> V_PRODUCT_CODE THEN
        
            V_FLAG             := 'Y';
            OUT_FIELD_IS_VALID := V_FLAG;
            OUT_FIELD_NAME     := V_FIELD_NAME;
            OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
          END IF;   
          
        ELSIF V_FIELD_NAME = 'DISTRICT_CODE-HIER' THEN
          IF V_FIELD_VAL IS NULL THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;     
        
        ELSIF V_FIELD_NAME = 'SCHOOL_CODE-HIER' THEN
          IF V_FIELD_VAL IS NULL THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;      
        
        ELSIF V_FIELD_NAME = 'SCHOOL_DIST-HIER' THEN
        
          IF V_FIELD_VAL IS NULL OR V_FIELD_VAL <> GV_SCH_DIST_CODE THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF; 
        
         ELSIF V_FIELD_NAME = 'GRADE-HIER' THEN
        IF V_FIELD_VAL IS NULL OR V_FIELD_VAL NOT IN
           ('01', '02', '03', '04', '05', '06', '07', '08') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
        
        END IF;
        
        END IF; --HIER END
        
        IF V_FIELD_NAME  LIKE '%BIO' THEN
        
        
       IF V_FIELD_NAME = 'DRC_STUDENT_ID-BIO' THEN
        IF V_FIELD_VAL IS NULL OR REGEXP_LIKE(V_FIELD_VAL, '[A-Za-z]') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
        
    /*  ELSIF V_FIELD_NAME = 'LAST_NAME-BIO' THEN
          IF V_FIELD_VAL IS NULL OR REGEXP_LIKE(V_FIELD_VAL,'[^A-Z0-9\s_\.''-]','i') THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;     
        
       ELSIF V_FIELD_NAME = 'FIRST_NAME-BIO' THEN
          IF V_FIELD_VAL IS NULL OR REGEXP_LIKE(V_FIELD_VAL,'[^A-Z0-9\s_\.''-]','i') THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;    
        
       ELSIF V_FIELD_NAME = 'BIRTH_DATE-BIO' THEN
        IF V_FIELD_VAL IS NULL OR LENGTH(V_FIELD_VAL) <> 8 OR
           (TO_NUMBER(SUBSTR(V_FIELD_VAL, 3, 2)) < 0) OR
           (TO_NUMBER(SUBSTR(V_FIELD_VAL, 3, 2)) > 31) OR
            TRIM(SUBSTR(V_FIELD_VAL, 3, 2)) IS NULL OR 
           (TO_NUMBER(SUBSTR(V_FIELD_VAL, 1, 2)) < 0) OR
           (TO_NUMBER(SUBSTR(V_FIELD_VAL, 1, 2)) > 12) OR
           TRIM(SUBSTR(V_FIELD_VAL, 1, 2)) IS NULL OR 
           REGEXP_LIKE(SUBSTR(V_FIELD_VAL, 5, 4), '[A-Za-z]') OR
           TRIM(SUBSTR(V_FIELD_VAL, 5, 4)) IS NULL  THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF; 
        */
        
     /* ELSIF V_FIELD_NAME = 'GENDER-BIO' THEN
        IF V_FIELD_VAL NOT IN ('M', 'F') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;*/
                                                 
        
        END IF;
        
        END IF; --BIO END
        
        
        
        IF V_FIELD_NAME LIKE '%DEMO' THEN
    
      IF V_FIELD_NAME = 'CURRENT_SCHOOL_YEAR-DEMO' THEN
        --IF REGEXP_INSTR(V_FIELD_VAL, '[^0-9]+', 1, 1) > 0 OR LENGTH(V_FIELD_VAL) <> 4 
        IF  V_FIELD_VAL IS NULL OR V_FIELD_VAL <> GV_ADMIN_YEAR THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
      
      /*ELSIF V_FIELD_NAME = 'RACE_ETHNICITY-DEMO' THEN
        IF V_FIELD_VAL NOT IN ('A', 'B', 'H', 'I', 'W', 'P', 'M') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;*/
        
      
      
      /*ELSIF V_FIELD_NAME = 'PERIOD-DEMO' THEN
        IF V_FIELD_VAL NOT IN
           ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', ' ') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;*/
      
      ELSIF V_FIELD_NAME = 'PT_CONTENT_FORM-DEMO' THEN
        IF V_FIELD_VAL NOT IN ('PA1', 'PA2', 'PA3', 'PS1', 'PT1', ' ') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
      
      /*ELSIF V_FIELD_NAME = 'EXAMINER_EMAIL-DEMO' THEN
        IF NOT REGEXP_LIKE(V_FIELD_VAL,'^([[:alnum:]]+(_?|\.))[[:alnum:]]*@[[:alnum:]]+(\.([[:alnum:]]+)){1,2}$') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;*/
      
     /* ELSIF V_FIELD_NAME = 'ACCOMMODATIONS-DEMO' THEN
        IF REGEXP_INSTR(V_FIELD_VAL, '[^Y| ]+', 1, 1) > 0 THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          PRC_ACCOMMODATIONS_CODE(V_FIELD_VAL, OUT_FIELD_ERR_CODE);
        END IF;*/
        
       ELSIF V_FIELD_NAME = 'CONTENT_FORM-DEMO' THEN
        IF V_FIELD_VAL NOT IN ('CA1', 'CA2', 'CA3', 'CS1', 'CT1', 'CT2') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
      
      ELSIF V_FIELD_NAME = 'PT_CONTENT_FORM-DEMO' THEN
        IF V_FIELD_VAL NOT IN ('PA1', 'PA2', 'PA3', 'PS1', 'PT1') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
      
      ELSIF V_FIELD_VAL NOT IN ('Y', ' ') THEN
      
        V_FLAG             := 'Y';
        OUT_FIELD_IS_VALID := V_FLAG;
        OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
        OUT_FIELD_ERR_CODE := V_ERR_CODE;
      
      END IF;
    END IF;
         
    IF V_FIELD_NAME LIKE '%SUBTEST' THEN
    
    
    IF V_FIELD_NAME = 'CONTENT_CODE-SUBTEST' THEN
        IF V_FIELD_VAL  IS NULL OR V_FIELD_VAL NOT IN ('01', '02', '03') THEN
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        END IF;
        
        
       ELSIF V_FIELD_NAME = 'EDUCATOR_FIRST_NAME-SUBTEST' THEN
          IF V_FIELD_VAL IS NULL OR REGEXP_LIKE(V_FIELD_VAL,'[^A-Z0-9\s_\.''-]','i') THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF;  
    
      ELSIF V_FIELD_NAME = 'EDUCATOR_LAST_NAME-SUBTEST' THEN
          IF V_FIELD_VAL IS NULL OR REGEXP_LIKE(V_FIELD_VAL,'[^A-Z0-9\s_\.''-]','i') THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
        
        END IF; 
    
       ELSIF V_FIELD_NAME = 'CONTENT_EXPORT_DATE_TIME-SUBTEST' THEN
          IF V_FIELD_VAL IS NOT NULL THEN
          
              BEGIN
           
                  V_CONTENT_EXPORT_DATE_TIME := TO_DATE(V_FIELD_VAL,'YYYYMMDDHH24MISS'); 
           
              EXCEPTION
              WHEN OTHERS THEN
                  V_FLAG             := 'Y';
                  OUT_FIELD_IS_VALID := V_FLAG;
                  OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
                  OUT_FIELD_ERR_CODE := V_ERR_CODE;
              END;
          
          ELSE
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
          END IF;
           
  
              
       ELSIF V_FIELD_NAME = 'CONTENT_ACHIEV_LEVEL-SUBTEST' THEN
        IF REGEXP_INSTR(V_FIELD_VAL, '[^0-4]+', 1, 1) > 0 THEN
        
          V_FLAG             := 'Y';
          OUT_FIELD_IS_VALID := V_FLAG;
          OUT_FIELD_NAME     := V_FIELD_NAME;
          OUT_FIELD_ERR_CODE := V_ERR_CODE;
          
          END IF; 
      
      END IF;
    
    END IF;
    
    IF V_FIELD_NAME LIKE '%OBJ' THEN
       
      IF V_FIELD_NAME LIKE 'OBJECTIVE_%_CODE-OBJ' THEN
          IF ((GV_CONTENT_CODE = '01' AND V_FIELD_NAME = 'OBJECTIVE_1_CODE-OBJ' AND V_FIELD_VAL <> '1')
                                  OR  (GV_CONTENT_CODE = '01' AND V_FIELD_NAME = 'OBJECTIVE_2_CODE-OBJ' AND V_FIELD_VAL <> '2')
                                  OR  (GV_CONTENT_CODE = '01' AND V_FIELD_NAME = 'OBJECTIVE_3_CODE-OBJ' AND V_FIELD_VAL <> '3')
                                  OR  (GV_CONTENT_CODE = '01' AND V_FIELD_NAME = 'OBJECTIVE_4_CODE-OBJ' AND V_FIELD_VAL <> '4')
                                  OR  (GV_CONTENT_CODE = '02' AND V_FIELD_NAME = 'OBJECTIVE_5_CODE-OBJ' AND V_FIELD_VAL <> '1')
                                  OR  (GV_CONTENT_CODE = '02' AND V_FIELD_NAME = 'OBJECTIVE_6_CODE-OBJ' AND V_FIELD_VAL <> '2')
                                  OR  (GV_CONTENT_CODE = '02' AND V_FIELD_NAME = 'OBJECTIVE_7_CODE-OBJ' AND V_FIELD_VAL <> '3')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_8_CODE-OBJ' AND V_FIELD_VAL <> '1')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_9_CODE-OBJ' AND V_FIELD_VAL <> '2')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_10_CODE-OBJ' AND V_FIELD_VAL <> '3')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_11_CODE-OBJ' AND V_FIELD_VAL <> '4')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_12_CODE-OBJ' AND V_FIELD_VAL <> '5')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_13_CODE-OBJ' AND V_FIELD_VAL <> '6')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_14_CODE-OBJ' AND V_FIELD_VAL <> '7')
                                  OR  (GV_CONTENT_CODE = '03' AND V_FIELD_NAME = 'OBJECTIVE_15_CODE-OBJ' AND V_FIELD_VAL <> '8')
                                  ) THEN
            V_FLAG             := 'Y';
            OUT_FIELD_IS_VALID := V_FLAG;
            OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
            OUT_FIELD_ERR_CODE := V_ERR_CODE;
          END IF;
          
        ELSIF V_FIELD_NAME LIKE 'OBJECTIVE_%_ACHEIVEMENT_LEVEL-OBJ' THEN
          IF ((GV_CONTENT_CODE = '02' AND V_FIELD_VAL NOT IN ('0','1','2','3'))
                                  OR  (GV_CONTENT_CODE = '01' AND V_FIELD_VAL NOT IN ('0','1','2','3'))) THEN
            V_FLAG             := 'Y';
            OUT_FIELD_IS_VALID := V_FLAG;
            OUT_FIELD_NAME     := REGEXP_SUBSTR(V_FIELD_NAME, '[^-]+', 1, 1);
            OUT_FIELD_ERR_CODE := V_ERR_CODE;
          END IF;
          
      END IF;
  
    END IF;
  
  END PRC_MO_VALID_VALUES_CHECK;

  PROCEDURE PRC_ACCOMMODATIONS_CODE(IN_VALUE IN VARCHAR2,
                                    OUT_VAL  OUT VARCHAR2) IS
  
    V_LEN NUMBER(20);
    V_VAL VARCHAR2(100);
  
  BEGIN
    V_VAL   := UPPER(IN_VALUE);
    V_LEN   := REGEXP_INSTR(V_VAL, '[^Y| ]+', 1, 1);
    OUT_VAL := 'Accom_' || V_LEN;
  
  END PRC_ACCOMMODATIONS_CODE;

END PKG_MO_STUDENT_DATA_VALIDATION;
/
