CREATE OR REPLACE FUNCTION SF_GET_EXAMINER_2016(LOGGEDINUSERJASPERORGID IN ORG_NODE_DIM.ORG_NODEID%TYPE,
                                                P_TEST_ADMINISTRATION   IN PRODUCT.PRODUCTID%TYPE,
                                                P_SCHOOL                IN ORG_NODE_DIM.ORG_NODEID%TYPE,
                                                P_GRADE                 IN VARCHAR2,
                                                P_SUBTEST               IN VARCHAR2,
                                                P_CUSTOMERID            IN CUSTOMER_INFO.CUSTOMERID%TYPE)
  RETURN PRS_COLL_PGT_GLOBAL_TEMP_OBJ IS

  /*******************************************************************************
  * FUNCTION:  SF_GET_EXAMINER_2016
  * PURPOSE:   TO GET DIFFERENT EXAMINER
  * CREATED:   TCS  05-FEB-2016
  * NOTE:
  * MODIFIED : To introduce multi select option
  * DATE         AUTHOR: JOY KUMAR PAL     DESCRIPTION
  *-------------------------------------------------------------------------------
  *
  ************************************************************************************/

  PRAGMA AUTONOMOUS_TRANSACTION;

  T_PRS_PGT_GLOBAL_TEMP_OBJ      PRS_PGT_GLOBAL_TEMP_OBJ;
  T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ PRS_COLL_PGT_GLOBAL_TEMP_OBJ := PRS_COLL_PGT_GLOBAL_TEMP_OBJ();

  V_CUST_PRODUCTID CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE;
  V_ORGNODELEVEL   ORG_NODE_DIM.ORG_NODE_LEVEL%TYPE;
  V_DISTRICT       ORG_NODE_DIM.ORG_NODEID%TYPE;
  V_SCHOOL         ORG_NODE_DIM.ORG_NODEID%TYPE;
  V_GRADE          VARCHAR2(10);
  V_SUBTEST        VARCHAR2(10);

  CURSOR C_GET_EXAMINER(P_CUST_PRODUCT_ID_4 CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                        ORG_ID_1            ORG_NODE_DIM.ORG_NODEID%TYPE,
                        P_GRADEID_1         VARCHAR2,
                        P_SUBTESTID         VARCHAR2) IS
    SELECT DISTINCT ED.EXAMINERID, ED.EXAMNER_NAME EXAMINER_NAME
      FROM EXAMINER_DIM ED, ORG_EXAMINER_LOOKUP OEL, ORG_PRODUCT_LINK OPL
     WHERE ED.EXAMINERID = OEL.EXAMINERID
       AND OEL.ORG_NODEID = OPL.ORG_NODEID
       AND OPL.CUST_PROD_ID = P_CUST_PRODUCT_ID_4
       AND OEL.ORG_NODEID = ORG_ID_1
       AND OEL.GRADEID IN
           (WITH T AS (SELECT P_GRADEID_1 AS TXT FROM DUAL)
             SELECT REGEXP_SUBSTR(TXT, '[^,]+', 1, LEVEL) AS GRADEID
               FROM T
             CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(TXT, '[^,]*')) + 1
            )
       AND OEL.SUBTESTID IN
           (WITH T AS (SELECT P_SUBTESTID AS TXT FROM DUAL)
             SELECT REGEXP_SUBSTR(TXT, '[^,]+', 1, LEVEL) AS SUBTESTID
               FROM T
             CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(TXT, '[^,]*')) + 1
            )
     ORDER BY EXAMINER_NAME;

  CURSOR C_GET_SUBTEST(P_CUST_PRODUCT_ID_3 CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                       P_GRADEID           VARCHAR2) IS
    SELECT A.SUBTESTID
      FROM (SELECT DISTINCT SUB.SUBTESTID, SUB.SUBTEST_NAME, SUB.SUBTEST_SEQ
              FROM SUBTEST_OBJECTIVE_MAP SOM,
                   GRADE_LEVEL_MAP       GLM,
                   CUST_PRODUCT_LINK     CUST,
                   ASSESSMENT_DIM        ASES,
                   SUBTEST_DIM           SUB
             WHERE GLM.GRADEID IN
                   (WITH T AS (SELECT P_GRADEID AS TXT FROM DUAL)
                     SELECT REGEXP_SUBSTR(TXT, '[^,]+', 1, LEVEL) AS GRADEID
                       FROM T
                     CONNECT BY LEVEL <=
                                LENGTH(REGEXP_REPLACE(TXT, '[^,]*')) + 1
                    )
               AND GLM.LEVEL_MAPID = SOM.LEVEL_MAPID
               AND SOM.ASSESSMENTID = ASES.ASSESSMENTID
               AND CUST.CUSTOMERID = P_CUSTOMERID
               AND CUST.PRODUCTID = ASES.PRODUCTID
               AND CUST.CUST_PROD_ID = P_CUST_PRODUCT_ID_3
               AND SOM.SUBTESTID = SUB.SUBTESTID
             ORDER BY SUB.SUBTEST_SEQ) A
     WHERE ROWNUM = 1;

  CURSOR C_GET_GRADE(P_CUST_PRODUCT_ID_2 CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                     ORG_ID              ORG_NODE_DIM.ORG_NODEID%TYPE) IS
    SELECT A.GRADEID
      FROM (SELECT DISTINCT GRD.GRADEID, GRD.GRADE_NAME, GRD.GRADE_SEQ
              FROM GRADE_SELECTION_LOOKUP GSL,
                   CUST_PRODUCT_LINK      CUST,
                   ASSESSMENT_DIM         ASSD,
                   GRADE_DIM              GRD,
                   ORG_PRODUCT_LINK       OLNK
             WHERE GSL.ADMINID = CUST.ADMINID
               AND GSL.ORG_NODEID = ORG_ID
               AND CUST.CUSTOMERID = P_CUSTOMERID
               AND CUST.CUST_PROD_ID = OLNK.CUST_PROD_ID
               AND GSL.ORG_NODEID = OLNK.ORG_NODEID
               AND CUST.PRODUCTID = ASSD.PRODUCTID
               AND ASSD.ASSESSMENTID = GSL.ASSESSMENTID
               AND CUST.CUST_PROD_ID = P_CUST_PRODUCT_ID_2
               AND GRD.GRADEID = GSL.GRADEID
             ORDER BY GRD.GRADE_SEQ) A
     WHERE ROWNUM = 1;

  CURSOR C_GET_SCHOOL(P_CUST_PRODUCT_ID_1 CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                      P_DISTRICT_ID       ORG_NODE_DIM.ORG_NODEID%TYPE) IS
    SELECT A.ORG_NODEID
      FROM (SELECT OND.ORG_NODEID,
                   OND.ORG_NODE_CODE || ' ' || OND.ORG_NODE_NAME AS ORG_NODE_NAME
              FROM CUST_PRODUCT_LINK CPL,
                   ORG_PRODUCT_LINK  ORPD,
                   ORG_NODE_DIM      OND
             WHERE CPL.CUST_PROD_ID = P_CUST_PRODUCT_ID_1
               AND CPL.CUST_PROD_ID = ORPD.CUST_PROD_ID
               AND CPL.CUSTOMERID = P_CUSTOMERID
               AND OND.CUSTOMERID = CPL.CUSTOMERID
               AND OND.ORG_NODEID = ORPD.ORG_NODEID
               AND ((V_ORGNODELEVEL = 1 AND
                   OND.PARENT_ORG_NODEID = P_DISTRICT_ID) OR
                   (V_ORGNODELEVEL = 2 AND
                   OND.PARENT_ORG_NODEID = P_DISTRICT_ID) OR
                   (V_ORGNODELEVEL = 3 AND
                   OND.ORG_NODEID = LOGGEDINUSERJASPERORGID))
               AND OND.ORG_NODE_LEVEL = 3
             ORDER BY 2) A
     WHERE ROWNUM = 1;

  CURSOR C_GET_DISTRICT(P_CUST_PRODUCTID CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE) IS
    SELECT A.ORG_NODEID
      FROM (SELECT OND.ORG_NODEID,
                   OND.ORG_NODE_CODE || ' ' || OND.ORG_NODE_NAME AS ORG_NODE_NAME
              FROM CUST_PRODUCT_LINK CPL,
                   ORG_PRODUCT_LINK  ORPD,
                   ORG_NODE_DIM      OND
             WHERE CPL.CUST_PROD_ID = P_CUST_PRODUCTID
               AND CPL.CUST_PROD_ID = ORPD.CUST_PROD_ID
               AND CPL.CUSTOMERID = P_CUSTOMERID
               AND OND.CUSTOMERID = CPL.CUSTOMERID
               AND ORPD.ORG_NODEID = OND.ORG_NODEID
               AND ((V_ORGNODELEVEL = 1 AND
                   OND.PARENT_ORG_NODEID = LOGGEDINUSERJASPERORGID) OR
                   (V_ORGNODELEVEL = 2 AND
                   OND.ORG_NODEID = LOGGEDINUSERJASPERORGID) OR
                   (V_ORGNODELEVEL <> 1 AND V_ORGNODELEVEL <> 2 AND
                   OND.ORG_NODEID =
                   (SELECT DISTINCT ORG.ORG_NODEID
                        FROM ORG_NODE_DIM ORG
                       WHERE ORG.ORG_NODE_LEVEL = 2
                       START WITH ORG.ORG_NODEID = LOGGEDINUSERJASPERORGID
                      CONNECT BY NOCYCLE
                       PRIOR ORG.PARENT_ORG_NODEID = ORG.ORG_NODEID)))
               AND OND.ORG_NODE_LEVEL = 2
             ORDER BY 2) A
     WHERE ROWNUM = 1;

  CURSOR C_GET_PRODUCT_SPECIFIC IS
    SELECT B.CUST_PROD_ID
      FROM (SELECT CUST.CUST_PROD_ID, PDT.PRODUCT_NAME, PDT.PRODUCT_SEQ
              FROM ORG_PRODUCT_LINK OPRD,
                   CUST_PRODUCT_LINK CUST,
                   PRODUCT PDT,
                   ADMIN_DIM ADM,
                   (SELECT DISTINCT ADMIN_YEAR, IS_CURRENT_ADMIN
                      FROM ADMIN_DIM) ADM1
             WHERE OPRD.ORG_NODEID = LOGGEDINUSERJASPERORGID
               AND OPRD.CUST_PROD_ID = CUST.CUST_PROD_ID
               AND PDT.PRODUCTID = CUST.PRODUCTID
               AND CUST.CUSTOMERID = P_CUSTOMERID
               AND CUST.ADMINID = ADM.ADMINID
               AND ADM.ADMIN_YEAR <= ADM1.ADMIN_YEAR
               AND ADM1.IS_CURRENT_ADMIN = 'Y'
             ORDER BY PDT.PRODUCT_SEQ DESC) B
     WHERE ROWNUM = 1;

  CURSOR C_GET_ORG_NODE_LEVEL IS
    SELECT ORG.ORG_NODE_LEVEL
      FROM ORG_NODE_DIM ORG
     WHERE ORG.ORG_NODEID = LOGGEDINUSERJASPERORGID
       AND ROWNUM = 1;

BEGIN

  FOR R_GET_ORG_NODE_LEVEL IN C_GET_ORG_NODE_LEVEL LOOP
    V_ORGNODELEVEL := R_GET_ORG_NODE_LEVEL.ORG_NODE_LEVEL;
  END LOOP;

  IF (P_SUBTEST = '-99') OR (P_SUBTEST IS NULL) THEN
    -----GET  DEFAULT PRODUCT
    FOR R_GET_PRODUCT_SPECIFIC IN C_GET_PRODUCT_SPECIFIC LOOP
      V_CUST_PRODUCTID := R_GET_PRODUCT_SPECIFIC.CUST_PROD_ID;
      --dbms_output.put_line ('V_CUST_PRODUCTID ='  || V_CUST_PRODUCTID);
    END LOOP;
    -----GET DEFAULT DISTRICT
    FOR R_GET_DISTRICT IN C_GET_DISTRICT(V_CUST_PRODUCTID) LOOP
      V_DISTRICT := R_GET_DISTRICT.ORG_NODEID;
      --dbms_output.put_line ('V_DISTRICT ='  || V_DISTRICT);
    END LOOP;
    -----GET DEFAULT SCHOOL
    FOR R_GET_SCHOOL IN C_GET_SCHOOL(V_CUST_PRODUCTID, V_DISTRICT) LOOP
      V_SCHOOL := R_GET_SCHOOL.ORG_NODEID;
      --dbms_output.put_line ('V_SCHOOL ='  || V_SCHOOL);
    END LOOP;
    -----GET DEFAULT GRADE
    FOR R_GET_GRADE IN C_GET_GRADE(V_CUST_PRODUCTID, V_SCHOOL) LOOP
      V_GRADE := R_GET_GRADE.GRADEID;
      -- dbms_output.put_line ('V_GRADE ='  || V_GRADE);
    END LOOP;
    -----GET DEFAULT SUBTEST
    FOR R_GET_SUBTEST IN C_GET_SUBTEST(V_CUST_PRODUCTID, V_GRADE) LOOP
      V_SUBTEST := R_GET_SUBTEST.SUBTESTID;
      --dbms_output.put_line ('V_SUBTEST ='  || V_SUBTEST);
    END LOOP;
    -----GET DEFAULT EXAMINER
    FOR R_GET_EXAMINER IN C_GET_EXAMINER(V_CUST_PRODUCTID,
                                         V_SCHOOL,
                                         V_GRADE,
                                         V_SUBTEST) LOOP
      --dbms_output.put_line ('EXAMINERID ='  || R_GET_EXAMINER.EXAMINERID);
      T_PRS_PGT_GLOBAL_TEMP_OBJ := PRS_PGT_GLOBAL_TEMP_OBJ();
    
      T_PRS_PGT_GLOBAL_TEMP_OBJ.VC1 := R_GET_EXAMINER.EXAMINERID;
      T_PRS_PGT_GLOBAL_TEMP_OBJ.VC2 := R_GET_EXAMINER.EXAMINER_NAME;
    
      T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.EXTEND(1);
      T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ(T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.COUNT) := T_PRS_PGT_GLOBAL_TEMP_OBJ;
    END LOOP;
  ELSE
    FOR R_GET_EXAMINER IN C_GET_EXAMINER(P_TEST_ADMINISTRATION,
                                         P_SCHOOL,
                                         P_GRADE,
                                         P_SUBTEST) LOOP
      T_PRS_PGT_GLOBAL_TEMP_OBJ := PRS_PGT_GLOBAL_TEMP_OBJ();
    
      T_PRS_PGT_GLOBAL_TEMP_OBJ.VC1 := R_GET_EXAMINER.EXAMINERID;
      T_PRS_PGT_GLOBAL_TEMP_OBJ.VC2 := R_GET_EXAMINER.EXAMINER_NAME;
    
      T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.EXTEND(1);
      T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ(T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.COUNT) := T_PRS_PGT_GLOBAL_TEMP_OBJ;
    END LOOP;
  END IF;

  IF T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.COUNT = 0 THEN
  
    T_PRS_PGT_GLOBAL_TEMP_OBJ     := PRS_PGT_GLOBAL_TEMP_OBJ();
    T_PRS_PGT_GLOBAL_TEMP_OBJ.VC1 := -2;
    T_PRS_PGT_GLOBAL_TEMP_OBJ.VC2 := 'None Available';
    T_PRS_PGT_GLOBAL_TEMP_OBJ.VC3 := -2;
  
    T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.EXTEND(1);
    T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ(T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ.COUNT) := T_PRS_PGT_GLOBAL_TEMP_OBJ;
  END IF;

  RETURN T_PRS_COLL_PGT_GLOBAL_TEMP_OBJ;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END SF_GET_EXAMINER_2016;
/
