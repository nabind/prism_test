--TASC_LOOKUP_DATA_SWAP
create table TASC_LOOKUP_DATA_SWAP
(
PRESENT_VALUE_NUM NUMBER,
SWAPPED_VALUE_NUM NUMBER,
PRESENT_VALUE_CHAR varchar2(200),
SWAPPED_VALUE_CHAR varchar2(200),
COLUMN_TYPE VARCHAR2(100)
);

--PROJECT_DIM
create table PROJECT_DIM
(
  PROJECTID           NUMBER,
  PROJECT_NAME VARCHAR2(100),
  CREATED_DATE_TIME   DATE,
  UPDATED_DATE_TIME   DATE
)NOLOGGING;


--CUSTOMER_INFO: DIFF STRUCTURE TASC columns
create table CUSTOMER_INFO
(
  CUSTOMERID           NUMBER not null,
  CUSTOMER_NAME        VARCHAR2(64) not null,
  DISPLAY_TP_SELECTION VARCHAR2(64) not null,
  FILE_LOCATION        VARCHAR2(1000),
  SUPPORT_EMAIL        VARCHAR2(1000),
  SEND_LOGIN_PDF       VARCHAR2(1) default 'Y',--
  CUSTOMER_CODE        VARCHAR2(2) ,--
  PROJECTID            NUMBER,
  DATETIMESTAMP        DATE default SYSDATE not null
)NOLOGGING;


--ADMIN_DIM
create table ADMIN_DIM
(
  ADMINID          NUMBER not null,
  ADMIN_NAME       VARCHAR2(64),
  ADMIN_SEASON     VARCHAR2(24) not null,
  ADMIN_YEAR       NUMBER,
  IS_CURRENT_ADMIN VARCHAR2(2) not null,
  FILE_LOCATION    VARCHAR2(250) not null,
  ADMIN_SEQ        NUMBER,
  PROJECTID        NUMBER,
  DATETIMESTAMP    DATE default SYSDATE not null
)NOLOGGING;


--PRODUCT: DIFF STRUCTURE
create table PRODUCT
(
  PRODUCTID      NUMBER not null,
  PRODUCT_NAME   VARCHAR2(64) not null,
  PRODUCT_TYPE   VARCHAR2(12),
  PRODUCT_SEQ    NUMBER not null,
  PRODUCT_CODE   VARCHAR2(64) not null,
  IS_IC_REQUIRED VARCHAR2(2) not null,
  IS_EDITABLE    VARCHAR2(2) not null,
  FILE_LOCATION  VARCHAR2(1000),
  PROJECTID      NUMBER,
  DATETIMESTAMP  DATE default SYSDATE not null
)NOLOGGING;


--CUST_PRODUCT_LINK
create table CUST_PRODUCT_LINK
(
  CUST_PROD_ID      NUMBER not null,
  CUSTOMERID        NUMBER not null,
  PRODUCTID         NUMBER not null,
  ADMINID           NUMBER not null,
  ACTIVATION_STATUS VARCHAR2(2) not null,
  DATETIMESTAMP     DATE default SYSDATE not null
)NOLOGGING;

create index INDX_CUST_PRODUCT_LINK_1 on CUST_PRODUCT_LINK (PRODUCTID, ACTIVATION_STATUS, CUSTOMERID, CUST_PROD_ID);
	  
--ASSESSMENT_DIM
create table ASSESSMENT_DIM
(
  ASSESSMENTID    NUMBER not null,
  ASSESSMENT_NAME VARCHAR2(64) not null,
  ASSESSMENT_TYPE VARCHAR2(5) not null,
  ASSESSMENT_CODE VARCHAR2(20) not null,
  PRODUCTID       NUMBER not null,
  DATETIMESTAMP   DATE default SYSDATE not null
)NOLOGGING;

create index ASSESSMENT_DIM_INDX on ASSESSMENT_DIM (PRODUCTID, ASSESSMENTID);

--GRADE_DIM	  
create table GRADE_DIM
(
  GRADEID       NUMBER not null,
  GRADE_NAME    VARCHAR2(20) not null,
  GRADE_SEQ     NUMBER not null,
  GRADE_CODE    VARCHAR2(20) not null,
  PROJECTID     NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;


--GENDER_DIM
create table GENDER_DIM
(
  GENDERID      NUMBER not null,
  GENDER_NAME   VARCHAR2(20) not null,
  GENDER_CODE   VARCHAR2(20) not null,
  PROJECTID     NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

create index INDX_GENDER_DIM_1 on GENDER_DIM (GENDER_CODE, GENDERID, GENDER_NAME);
create index INDX_GENDER_DIM_2 on GENDER_DIM (GENDERID, GENDER_NAME);

--LEVEL_DIM
create table LEVEL_DIM
(
  LEVELID       NUMBER not null,
  LEVEL_NAME    VARCHAR2(20) not null,
  LEVEL_CODE    VARCHAR2(20) not null,
  PROJECTID     NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;


--FORM_DIM
create table FORM_DIM
(
  FORMID        NUMBER not null,
  FORM_NAME     VARCHAR2(20) not null,
  FORM_CODE     VARCHAR2(20) not null,
  PROJECTID     NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

create index INDX_FORM_DIM_1 on FORM_DIM (FORMID, FORM_NAME);

--READ_DIM
create table READ_DIM
(
  READID        NUMBER not null,
  READ_NAME     VARCHAR2(20) not null,
  READ_CODE     VARCHAR2(20) not null,
  ITEM_TYPE     VARCHAR2(3) not null,
  PROJECTID     NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;


--CONTENT_DIM
create table CONTENT_DIM
(
  CONTENTID     NUMBER not null,
  CONTENT_NAME  VARCHAR2(32) not null,
  CONTENT_SEQ   NUMBER not null,
  ASSESSMENTID  NUMBER not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;


--SUBTEST_DIM	  
create table SUBTEST_DIM
(
  SUBTESTID     NUMBER not null,
  SUBTEST_NAME  VARCHAR2(32) not null,
  SUBTEST_SEQ   NUMBER not null,
  SUBTEST_CODE  VARCHAR2(20) not null,
  SUBTEST_TYPE  VARCHAR2(20) not null,
  CONTENTID     NUMBER not null,
  CANDIDATE_SUB_SEQ	NUMBER,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

create index INDX_SUBTEST_DIM_1 on SUBTEST_DIM (SUBTEST_CODE, SUBTEST_NAME);
create index INDX_SUBTEST_DIM_2 on SUBTEST_DIM (SUBTESTID, SUBTEST_NAME, SUBTEST_SEQ);
	  
--OBJECTIVE_DIM: DIFF STRUCTURE
create table OBJECTIVE_DIM
(
  OBJECTIVEID    NUMBER not null,
  OBJECTIVE_NAME VARCHAR2(35) not null,
  OBJECTIVE_SEQ  NUMBER not null,
  OBJECTIVE_TYPE VARCHAR2(20),
  OBJECTIVE_CODE VARCHAR2(20) not null,
  OBJECTIVE_DESC VARCHAR2(100),
  PROJECTID      NUMBER,
  DATETIMESTAMP  DATE default SYSDATE not null
)NOLOGGING;

 
--TEST_PROGRAM
create table TEST_PROGRAM
(
  TP_ID             NUMBER not null,
  TP_CODE           VARCHAR2(64) not null,
  TP_NAME           VARCHAR2(64) not null,
  TP_TYPE           VARCHAR2(12) not null,
  NUM_LEVELS        NUMBER not null,
  TP_MODE           VARCHAR2(2) not null,
  CUSTOMERID        NUMBER not null,
  ADMINID           NUMBER not null,
  ACTIVATION_STATUS VARCHAR2(2) not null,
  DATETIMESTAMP     DATE default SYSDATE not null
)NOLOGGING;

create index IDX_TEST_PROGRAM_1 on TEST_PROGRAM (TP_CODE);
create index IDX_TEST_PROGRAM_2 on TEST_PROGRAM (CUSTOMERID, NUM_LEVELS);  
	  
--ORG_TP_STRUCTURE
create table ORG_TP_STRUCTURE
(
  TP_ID         NUMBER not null,
  ORG_LEVEL     NUMBER not null,
  ORG_LABEL     VARCHAR2(12) not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;


--LEVEL_MAP
create table LEVEL_MAP
(
  LEVEL_MAPID   NUMBER not null,
  LEVELID       NUMBER not null,
  FORMID        NUMBER,
  ASSESSMENTID  NUMBER not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

create index INDX_LEVEL_MAP_1 on LEVEL_MAP (LEVELID, FORMID, LEVEL_MAPID);
create index INDX_LEVEL_MAP_2 on LEVEL_MAP (LEVEL_MAPID, ASSESSMENTID, FORMID, LEVELID);

--SUBTEST_OBJECTIVE_MAP	  
create table SUBTEST_OBJECTIVE_MAP
(
  SUBT_OBJ_MAPID NUMBER not null,
  SUBTESTID      NUMBER not null,
  OBJECTIVEID    NUMBER,
  LEVEL_MAPID    NUMBER not null,
  ASSESSMENTID   NUMBER not null,
  DATETIMESTAMP  DATE default SYSDATE not null
)NOLOGGING;

create index INDX_SUBTEST_OBJECTIVE_MAP_1 on SUBTEST_OBJECTIVE_MAP (LEVEL_MAPID, SUBTESTID, OBJECTIVEID, ASSESSMENTID);
	  
--ITEMSET_DIM: DIFF STRUCTURE
create table ITEMSET_DIM
(
  ITEMSETID      NUMBER not null,
  ITEM_NAME      VARCHAR2(30),
  ITEM_CODE      VARCHAR2(20) not null, 
  SESSION_ID     VARCHAR2(20),
  ITEM_SEQ       NUMBER not null, 
  POINT_POSSIBLE NUMBER,
  ITEM_TYPE      VARCHAR2(3) not null,
  PDF_FILENAME   VARCHAR2(50),
  SUBT_OBJ_MAPID NUMBER,
  SUBTESTID      NUMBER,
  ITEM_NUMBER    NUMBER,
  ITEM_PART      VARCHAR2(2),
  MODEULEID      VARCHAR2(10),
  PROJECTID      NUMBER,
  DATETIMESTAMP  DATE default SYSDATE not null
)NOLOGGING;


--GRADE_LEVEL_MAP
create table GRADE_LEVEL_MAP
(
  GRADEID       NUMBER not null,
  LEVEL_MAPID   NUMBER not null,
  ONLEVEL_FLAG  CHAR(1) not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

	  
--ROLE
create table ROLE
(
  ROLEID            NUMBER not null,
  ROLE_NAME         VARCHAR2(30),
  DESCRIPTION       VARCHAR2(60),
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


/*--Not needed to run
--ROLE_CUSTOMER
create table ROLE_CUSTOMER
(
  ROLEID            NUMBER not null,
  CUSTOMERID        NUMBER not null,
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;	 */ 

	  
--DASH_REPORTS
create table DASH_REPORTS
(
  DB_REPORTID       NUMBER not null,
  REPORT_NAME       VARCHAR2(100),
  REPORT_DESC       VARCHAR2(400),
  REPORT_TYPE       VARCHAR2(12) not null,
  REPORT_FOLDER_URI VARCHAR2(400),
  ACTIVATION_STATUS VARCHAR2(2) not null,
  PROJECTID         NUMBER,
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;

create index INDX_DASH_REPORTS_1 on DASH_REPORTS (REPORT_NAME);

--DASH_MENUS
create table DASH_MENUS
(
  DB_MENUID         NUMBER not null,
  MENU_NAME         VARCHAR2(60) not null,
  MENU_TYPE         VARCHAR2(12),
  MENU_SEQ          NUMBER not null,
  DESCRIPTION       VARCHAR2(50),
  PROJECTID         NUMBER,
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--DASH_MENU_RPT_ACCESS
create table DASH_MENU_RPT_ACCESS
(
  DB_MENUID         NUMBER not null,
  DB_REPORTID       NUMBER not null,
  ROLEID            NUMBER not null,
  ORG_LEVEL         NUMBER not null,
  CUST_PROD_ID      NUMBER not null,
  REPORT_SEQ        NUMBER not null,
  PROJECTID         NUMBER,
  ACTIVATION_STATUS VARCHAR2(2) not null,  
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;

	
--DASH_MESSAGE_TYPE	
create table DASH_MESSAGE_TYPE
(
  MSG_TYPEID        NUMBER not null,
  MESSAGE_NAME      VARCHAR2(60) not null,
  MESSAGE_TYPE      VARCHAR2(12) not null,
  DESCRIPTION       VARCHAR2(60) not null,
  CUST_PROD_ID      NUMBER not null,
  CREATED_DATE_TIME DATE default SYSDATE not null,
  UPDATED_DATE_TIME DATE
)NOLOGGING;

	  
--DASH_MESSAGES
create table DASH_MESSAGES
(
  DB_REPORTID       NUMBER not null,
  MSG_TYPEID        NUMBER not null,
  REPORT_MSG        CLOB,
  CUST_PROD_ID      NUMBER not null,
  ACTIVATION_STATUS VARCHAR2(2) not null,
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--PWD_HINT_QUESTIONS
create table PWD_HINT_QUESTIONS
(
  PH_QUESTIONID     NUMBER not null,
  QUESTION_VALUE    VARCHAR2(200),
  QUESTION_SEQ      NUMBER not null,
  ACTIVATION_STATUS VARCHAR2(2) not null,
  CREATED_DATE_TIME DATE default SYSDATE,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--CONDITION_CODES
create table CONDITION_CODES
(
  CONDCODE_ID       NUMBER not null,
  SUBTESTID         NUMBER not null,
  COND_CODE         VARCHAR2(1) not null,
  COND_CODE_NAME    VARCHAR2(32) not null,
  CREATED_DATE_TIME DATE default SYSDATE not null,
  UPDATED_DATE_TIME DATE default SYSDATE not null
)NOLOGGING;

	  
--ORG_USER_DEFINE_LOOKUP
create table ORG_USER_DEFINE_LOOKUP
(
  ROLEID         NUMBER not null,
  ORG_NODE_LEVEL NUMBER not null,
  USER_SEQ       NUMBER not null,
  USER_NAME      VARCHAR2(30),
  USER_PASSWORD  VARCHAR2(30),
  CUSTOMERID     NUMBER not null,
  DATETIMESTAMP  DATE not null
)NOLOGGING;

	  
--NATL_MEAN_SS_LOOKUP
create table NATL_MEAN_SS_LOOKUP
(
  NMS_LOOKUPID  NUMBER not null,
  GRADEID       NUMBER,
  LEVELID       NUMBER,
  SUBTESTID     NUMBER,
  SS            NUMBER not null,
  CUST_PROD_ID  NUMBER not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

	  
--NP_MEAN_NCE_LOOKUP
create table NP_MEAN_NCE_LOOKUP
(
  NMN_LOOKUPID  NUMBER not null,
  NCE           NUMBER not null,
  NP            NUMBER not null,
  CUST_PROD_ID  NUMBER not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

create index INDX_NP_MEAN_NCE_LOOKUP_1 on NP_MEAN_NCE_LOOKUP (NCE, NP);
	  
--NP_NCE_LOOKUP
create table NP_NCE_LOOKUP
(
  NN_LOOKUPID   NUMBER not null,
  NP            NUMBER,
  NCE           NUMBER,
  CUST_PROD_ID  NUMBER not null,
  DATETIMESTAMP DATE default SYSDATE not null
)NOLOGGING;

	  
--ACTIVITY_TYPE
create table ACTIVITY_TYPE
(
  ACTY_TYPEID       NUMBER not null,
  ACTIVITY_NAME     VARCHAR2(20) not null,
  ACTIVITY_TYPE     VARCHAR2(20) not null,
  DESCRIPTION       VARCHAR2(500),
  CREATED_DATE_TIME DATE default SYSDATE not null,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--DASH_ACTION_ACCESS
create table DASH_ACTION_ACCESS
(
  DB_ACT_ACCESSID   NUMBER not null,
  DB_MENUID         NUMBER not null,
  DB_REPORTID       NUMBER not null,
  DB_ACTIONID       NUMBER not null,
  ROLEID            NUMBER not null,
  ORG_LEVEL         NUMBER not null,
  CUST_PROD_ID      NUMBER not null,
  ACTION_SEQ        NUMBER not null,
  PROJECTID         NUMBER,
  ACTIVATION_STATUS VARCHAR2(2) not null,
  CREATED_DATE_TIME DATE default sysdate,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--DASH_CONTRACT_PROP
create table DASH_CONTRACT_PROP
(
  DB_PROPERTYID    NUMBER not null,
  DB_PROPERTY_NAME VARCHAR2(50),
  DB_PROPERY_VALUE VARCHAR2(100),
  SSO_SOURCE       VARCHAR2(100),
  PROJECTID        NUMBER
)NOLOGGING;


--DASH_RPT_ACTION
create table DASH_RPT_ACTION
(
  DB_ACTIONID       NUMBER not null,
  ACTION_NAME       VARCHAR2(30),
  ACTION_TYPE       VARCHAR2(10),
  DESCRIPTION       VARCHAR2(100),
  PROJECTID         NUMBER,
  CREATED_DATE_TIME DATE default sysdate,
  UPDATED_DATE_TIME DATE
)NOLOGGING;


--SCORE_TYPE_LOOKUP
create table SCORE_TYPE_LOOKUP
(
  SCORE_TYPEID      NUMBER not null,
  CATEGORY          VARCHAR2(64) not null,
  SCORE_TYPE        VARCHAR2(12),
  SCORE_VALUE       VARCHAR2(64) not null,
  SCORE_VALUE_NAME  VARCHAR2(64) not null,
  CUST_PROD_ID      NUMBER not null,
  CREATED_DATE_TIME DATE default SYSDATE not null,
  UPDATED_DATE_TIME DATE default SYSDATE
)NOLOGGING;

CREATE INDEX INDX_SCORE_TYPE_LOOKUP ON SCORE_TYPE_LOOKUP (CATEGORY, SCORE_TYPE, CUST_PROD_ID, SCORE_VALUE, SCORE_VALUE_NAME);	

--TRG_SCORE_LKPID
CREATE OR REPLACE TRIGGER TRG_SCORE_LKPID
 BEFORE INSERT ON SCORE_TYPE_LOOKUP
 FOR EACH ROW
Begin
  Select seq_score_lkp_id.Nextval Into :New.SCORE_TYPEID From Dual;
End TRG_SCORE_LKPID;
/

  --FTP_CONFIG: DIFF STRUCTURE
CREATE TABLE FTP_CONFIG
(
  FTPID             NUMBER NOT NULL,
  CUSTOMERID        NUMBER NOT NULL,
  FTP_NAME          VARCHAR2(64) NOT NULL,
  HOST_NAME         VARCHAR2(32) NOT NULL,
  FILE_PROTOCOL     VARCHAR2(4) NOT NULL,
  USER_NAME         VARCHAR2(32) NOT NULL,
  PASSWORD          VARCHAR2(32) NOT NULL,
  FTP_LOCATION      VARCHAR2(400) NOT NULL,
  FTP_MODE          VARCHAR2(1),--NOT IN ISTEP
  ACTIVATION_STATUS VARCHAR2(2) NOT NULL,
  DATETIMESTAMP     DATE DEFAULT SYSDATE NOT NULL
)NOLOGGING;

--PDF_REPORTS
CREATE TABLE PDF_REPORTS
(
  PDF_REPORTID      NUMBER NOT NULL,
  ORG_NODE_LEVEL    NUMBER,
  REPORT_NAME       VARCHAR2(40),
  REPORT_CODE       VARCHAR2(40),
  CUST_PROD_ID      NUMBER,
  ACTIVATION_STATUS VARCHAR2(2) NOT NULL,--NOT IN TASC
  DATETIMESTAMP     DATE DEFAULT SYSDATE NOT NULL
);

CREATE INDEX IDX_PDF_REPORTS_1 ON PDF_REPORTS (REPORT_NAME, CUST_PROD_ID); 

CREATE TABLE ETL_PROJECT_CONFIG
(
  SEQ_NO             NUMBER NOT NULL,
  COLUMN_NAME        VARCHAR2(200),
  START_POSITION     NUMBER,
  END_POSITION       NUMBER,
  LENGTH             NUMBER,
  CATEGORY           VARCHAR2(32),
  CATEGORY_TYPE      VARCHAR2(32),
  CATEGORY_VALUE     VARCHAR2(32),
  DATA_EXTRACT_BLOCK VARCHAR2(32),
  REPLACE_FLAG       VARCHAR2(10),
  REPLACE_VALUE      VARCHAR2(32),
  IS_BIO_UPDATE      VARCHAR2(10),
  DESCRIPTION        VARCHAR2(4000),
  ACTIVATION_STATUS  VARCHAR2(2) NOT NULL,  
  PRODUCT_CODE       VARCHAR2(30),
  PROJECTID          NUMBER,
  DATETIMESTAMP      DATE NOT NULL
);

alter table ETL_PROJECT_CONFIG add constraint PK_ETL_PROJECT_CONFIG primary key (SEQ_NO,PROJECTID);
alter table ETL_PROJECT_CONFIG add constraint CHK_ETL_PROJECT_CONFIG_1 check (REPLACE_FLAG IN ('Y','N'));
alter table ETL_PROJECT_CONFIG add constraint CHK_ETL_PROJECT_CONFIG_2 check (IS_BIO_UPDATE IN ('Y','N'));
alter table ETL_PROJECT_CONFIG add constraint CHK_ETL_PROJECT_CONFIG check (ACTIVATION_STATUS IN ('AC','IN'));

create table ETL_JOBMASTER_CONFIG
(
  MAPPING_NAME        VARCHAR2(80),
  SESSION_NAME        VARCHAR2(80),
  WORKFLOW_NAME       VARCHAR2(80),
  REPOSITORY_SERVICE  VARCHAR2(100),
  INTEGRATION_SERVICE VARCHAR2(100),
  DOMAIN_NAME         VARCHAR2(100),
  PROJECTID           NUMBER,
  CREATED_DATE_TIME   DATE,
  UPDATED_DATE_TIME   DATE
);
