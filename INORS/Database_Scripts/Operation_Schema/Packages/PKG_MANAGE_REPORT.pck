CREATE OR REPLACE PACKAGE PKG_MANAGE_REPORT AS

  -- Author  : Joy Kumar Pal
  -- Created : 8/20/2014 12:25:11 PM
  -- Purpose : To manage all the messages dynamically

  TYPE GET_REFCURSOR IS REF CURSOR;

  PROCEDURE SP_GET_SYSTEM_MESSAGE(P_IN_REPORT_NAME    IN DASH_REPORTS.REPORT_NAME%TYPE,
                                  P_IN_MESSAGE_TYPE   IN DASH_MESSAGE_TYPE.MESSAGE_TYPE%TYPE,
                                  P_IN_MESSAGE_NAME   IN DASH_MESSAGE_TYPE.MESSAGE_NAME%TYPE,
                                  P_OUT_CUR_MESSAGE   OUT GET_REFCURSOR,
                                  P_OUT_EXCEP_ERR_MSG OUT VARCHAR2);

  PROCEDURE SP_GET_REPORT_MESSAGE_LIST(P_IN_REPORT_ID      IN DASH_REPORTS.DB_REPORTID%TYPE,
                                       P_IN_MESSAGE_TYPE   IN DASH_MESSAGE_TYPE.MESSAGE_TYPE%TYPE,
                                       P_IN_CUST_PROD_ID   IN CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                                       P_OUT_CUR_MESSAGE   OUT GET_REFCURSOR,
                                       P_OUT_EXCEP_ERR_MSG OUT VARCHAR2);

END PKG_MANAGE_REPORT;
/
CREATE OR REPLACE PACKAGE BODY PKG_MANAGE_REPORT AS

  /*
  THIS PROCEDURE RETURNS MESSAGES FOR 
  LANDING PAGE,LOGIN PAGE.
  */
  PROCEDURE SP_GET_SYSTEM_MESSAGE(P_IN_REPORT_NAME    IN DASH_REPORTS.REPORT_NAME%TYPE,
                                  P_IN_MESSAGE_TYPE   IN DASH_MESSAGE_TYPE.MESSAGE_TYPE%TYPE,
                                  P_IN_MESSAGE_NAME   IN DASH_MESSAGE_TYPE.MESSAGE_NAME%TYPE,
                                  P_OUT_CUR_MESSAGE   OUT GET_REFCURSOR,
                                  P_OUT_EXCEP_ERR_MSG OUT VARCHAR2) IS
  
  BEGIN
    OPEN P_OUT_CUR_MESSAGE FOR
      SELECT DM.REPORT_MSG AS REPORT_MSG
        FROM DASH_REPORTS DR, DASH_MESSAGES DM, DASH_MESSAGE_TYPE DMT
       WHERE DM.MSG_TYPEID = DMT.MSG_TYPEID
         AND DR.DB_REPORTID = DM.DB_REPORTID
         AND DR.REPORT_NAME = P_IN_REPORT_NAME
         AND DMT.MESSAGE_TYPE = P_IN_MESSAGE_TYPE
         AND DMT.MESSAGE_NAME = P_IN_MESSAGE_NAME
         AND DM.ACTIVATION_STATUS = 'AC';
  
  EXCEPTION
    WHEN OTHERS THEN
      P_OUT_EXCEP_ERR_MSG := UPPER(SUBSTR(SQLERRM, 12, 255));
  END SP_GET_SYSTEM_MESSAGE;

  /*
  THIS PROCEDURE RETURNS THE GENERIC MESSAGES FOR 
  CONFIGURE MESSAGE PAGE.
  */
  PROCEDURE SP_GET_REPORT_MESSAGE_LIST(P_IN_REPORT_ID      IN DASH_REPORTS.DB_REPORTID%TYPE,
                                       P_IN_MESSAGE_TYPE   IN DASH_MESSAGE_TYPE.MESSAGE_TYPE%TYPE,
                                       P_IN_CUST_PROD_ID   IN CUST_PRODUCT_LINK.CUST_PROD_ID%TYPE,
                                       P_OUT_CUR_MESSAGE   OUT GET_REFCURSOR,
                                       P_OUT_EXCEP_ERR_MSG OUT VARCHAR2) IS
  
  BEGIN
  
    IF P_IN_MESSAGE_TYPE = 'GSCM' THEN
      /*
         RULES:
      1. THERE SHOULD BE ONLY ONE ENTRY FOR MESSAGE_TYPE(GSCM) IN DASH_MESSAGE_TYPE 
         ASSOCIATED WITH DEFAULT CUST_PROD_ID(5001)
      2.IT DOES NOT DEPENDS UPON CUST_PROD_ID.
         */
      OPEN P_OUT_CUR_MESSAGE FOR
        SELECT DMT.MSG_TYPEID       MESSAGE_TYPEID,
               DMT.MESSAGE_NAME     MESSAGE_NAME,
               DMT.MESSAGE_TYPE     MESSAGE_TYPE,
               DMT.DESCRIPTION      MESSAGE_DESC,
               DM.REPORT_MSG        MESSAGE,
               P_IN_REPORT_ID       REPORTID,
               DMT.CUST_PROD_ID     CUST_PROD_ID,
               DM.ACTIVATION_STATUS ACTIVATION_STATUS
          FROM DASH_MESSAGE_TYPE DMT, DASH_MESSAGES DM
         WHERE DMT.CUST_PROD_ID = DM.CUST_PROD_ID(+)
           AND DMT.MSG_TYPEID = DM.MSG_TYPEID(+)
           AND DM.DB_REPORTID(+) = P_IN_REPORT_ID
           AND DMT.MESSAGE_TYPE IN ('GSCM')
         ORDER BY DMT.MESSAGE_NAME;
    
    ELSIF P_IN_MESSAGE_TYPE = 'PSCM' THEN
      OPEN P_OUT_CUR_MESSAGE FOR
        SELECT DMT.MSG_TYPEID       MESSAGE_TYPEID,
               DMT.MESSAGE_NAME     MESSAGE_NAME,
               DMT.MESSAGE_TYPE     MESSAGE_TYPE,
               DMT.DESCRIPTION      MESSAGE_DESC,
               DM.REPORT_MSG        MESSAGE,
               P_IN_REPORT_ID       REPORTID,
               P_IN_CUST_PROD_ID    CUST_PROD_ID,
               DM.ACTIVATION_STATUS ACTIVATION_STATUS
          FROM DASH_MESSAGE_TYPE DMT, DASH_MESSAGES DM
         WHERE DMT.CUST_PROD_ID = DM.CUST_PROD_ID(+)
           AND DMT.MSG_TYPEID = DM.MSG_TYPEID(+)
           AND DM.DB_REPORTID(+) = P_IN_REPORT_ID
           AND DMT.MESSAGE_TYPE IN ('PSCM')
           AND DMT.CUST_PROD_ID = P_IN_CUST_PROD_ID
         ORDER BY DMT.MESSAGE_NAME;
    
    ELSE
      OPEN P_OUT_CUR_MESSAGE FOR
        SELECT DMT.MSG_TYPEID       MESSAGE_TYPEID,
               DMT.MESSAGE_NAME     MESSAGE_NAME,
               DMT.MESSAGE_TYPE     MESSAGE_TYPE,
               DMT.DESCRIPTION      MESSAGE_DESC,
               DM.REPORT_MSG        MESSAGE,
               P_IN_REPORT_ID       REPORTID,
               P_IN_CUST_PROD_ID    CUST_PROD_ID,
               DM.ACTIVATION_STATUS ACTIVATION_STATUS
          FROM DASH_MESSAGE_TYPE DMT, DASH_MESSAGES DM
         WHERE DMT.CUST_PROD_ID = DM.CUST_PROD_ID(+)
           AND DMT.MSG_TYPEID = DM.MSG_TYPEID(+)
           AND DM.DB_REPORTID(+) = P_IN_REPORT_ID
           AND DMT.MESSAGE_TYPE NOT IN ('PSCM', 'GSCM')
           AND DMT.CUST_PROD_ID = P_IN_CUST_PROD_ID
         ORDER BY DMT.MESSAGE_NAME;
    
    END IF;
  
  EXCEPTION
    WHEN OTHERS THEN
      P_OUT_EXCEP_ERR_MSG := UPPER(SUBSTR(SQLERRM, 12, 255));
  END SP_GET_REPORT_MESSAGE_LIST;

END PKG_MANAGE_REPORT; --END OF PACKAGE
/
